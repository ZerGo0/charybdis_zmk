#include "keys_de_swiss.h"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 1 2>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <2>;
    };

    /* input config for snipe mode - auto-enabled on layer 3 (LAYER_FUNC2) */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };


    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <31 28>;
        };

        rh_leftClick {
            bindings = <&mkp LCLK>;
            key-positions = <43 44>;
        };

        rh_rightClick {
            bindings = <&mkp RCLK>;
            key-positions = <44 45>;
        };

        rh_middleClick {
            bindings = <&mkp MCLK>;
            key-positions = <44 45 43>;
        };

        lh_leftClick {
            bindings = <&mkp LCLK>;
            key-positions = <40 39>;
        };

        lh_rightClick {
            bindings = <&mkp RCLK>;
            key-positions = <38 39>;
        };

        lh_middleClick {
            bindings = <&mkp MCLK>;
            key-positions = <38 39 40>;
        };

        CAPZ {
            bindings = <&kp CAPSLOCK>;
            key-positions = <24 25>;
        };
    };

    behaviors {
        // Home row mods - right hand
        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 53 54 51 52 55>;
            hold-trigger-on-release;
        };

        // Home row mods - left hand
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <175>;
            flavor = "balanced";
            hold-trigger-key-positions = <48 49 50 53 54 51 52 55 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 51 52>;
            hold-trigger-on-release;
        };

        // Tap Dance 0: ' (single) / - (double)
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DE_SQT>, <&kp DE_MINUS>;
        };

        // Tap Dance 1: $ (single) / â‚¬ (double)
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp DE_DOLLAR>, <&kp DE_EURO>;
        };

        // Tap Dance 2: HOME (single) / END (double)
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp HOME>, <&kp END>;
        };

        // Tap Dance 3: H (single) / , (double)
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp H>, <&kp DE_COMMA>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // LAYER_BASE = 0
        default_layer {
            label = "BASE";
            bindings = <
&kp ESC     &kp N1           &kp N2           &kp N3             &kp N4              &kp N5          &kp N6   &kp N7              &kp N8            &kp N9           &kp N0      &kp PSCRN
&kp TAB     &kp Q            &kp W            &kp F              &kp P               &kp B           &kp J    &kp L               &kp U             &kp DE_Z         &td0        &kp DE_SEMICOLON
&kp LSHFT   &hml LGUI A      &hml LALT R      &hml LSHFT S       &hml LCTRL T        &kp G           &kp M    &hmr RCTRL N        &hmr RSHFT E      &hmr LALT I      &kp O       &none
&kp LCTRL   &kp DE_Y         &kp X            &kp C              &kp D               &kp V           &kp K    &kp H               &kp DE_COMMA      &kp DE_DOT       &kp DE_LBKT &td2
                                              &lt 3 SPACE        &kp ENTER           &mo 1           &kp DEL  &kp BSPC
                                                                 &mo 2               &mo 3           &mo 2
            >;
        };

        // LAYER_SYM = 1
        symbol_layer {
            label = "SYM";
            bindings = <
&trans      &trans           &trans                   &trans                          &trans                          &trans          &trans             &trans                   &trans                    &trans                     &trans               &trans
&trans      &kp DE_SLASH     &kp DE_QUESTION          &kp DE_LBKT                     &kp DE_RBKT                     &kp DE_LT       &kp DE_EXCL        &kp DE_LT                &kp DE_GT                 &kp DE_PERCENT             &td1                 &trans
&trans      &kp DE_AMPS      &kp DE_UNDER             &kp DE_LPAR                     &kp DE_RPAR                     &kp DE_CARET    &kp DE_PLUS        &kp DE_ASTRK             &kp DE_EQUAL              &kp DE_COLON               &kp DE_SEMI          &trans
&trans      &kp DE_AT        &kp DE_BSLH              &kp DE_RBKT                     &kp DE_PIPE                     &kp DE_DQT      &kp DE_MINUS       &kp DE_HASH              &kp DE_RBKT               &kp DE_TILDE               &kp DE_GRAVE         &trans
                                                      &trans                          &trans                          &trans          &trans             &trans
                                                                                      &trans                          &trans          &trans
            >;
        };

        // LAYER_FUNC1 = 2
        function1_layer {
            label = "FUNC1";
            bindings = <
&trans      &trans           &trans           &trans             &trans              &trans          &trans             &trans              &trans            &trans           &trans               &trans
&trans      &kp F1           &kp F2           &kp F3             &kp F10             &kp F11         &kp KP_SLASH       &kp N7              &kp N8            &kp N9           &kp KP_MINUS         &trans
&trans      &hml LGUI F4     &hml LALT F5     &hml LSHFT F6      &hml LCTRL F12      &kp F13         &kp KP_MULTIPLY    &hmr RCTRL N4       &hmr RSHFT N5     &hmr LALT N6     &kp KP_PLUS          &trans
&trans      &kp F7           &kp F8           &kp F9             &kp F14             &kp F15         &kp N0             &kp N1              &kp N2            &kp N3           &kp KP_DOT           &kp KP_COMMA
                                              &trans             &trans              &trans          &trans             &trans
                                                                 &trans              &trans          &trans
            >;
        };

        // LAYER_FUNC2 = 3
        function2_layer {
            label = "FUNC2";
            bindings = <
&trans      &trans           &trans           &trans             &trans              &trans          &trans             &trans              &trans            &trans           &trans               &trans
&trans      &kp F13          &kp F14          &kp F15            &kp F16             &kp F17         &none              &mwh RIGHT          &kp UP            &mwh LEFT        &none                &trans
&trans      &hml LGUI F18    &hml LALT F19    &hml LSHFT F20     &hml LCTRL F17      &kp F18         &mwh DOWN          &kp LEFT            &kp DOWN          &kp RIGHT        &mkp MB4             &trans
&trans      &none            &none            &none              &kp F19             &kp F20         &mwh UP            &mkp LCLK           &mkp MCLK         &mkp RCLK        &mkp MB5             &trans
                                              &trans             &trans              &trans          &trans             &trans
                                                                 &trans              &trans          &trans
            >;
        };
    };
};